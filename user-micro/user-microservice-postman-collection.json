{
  "info": {
    "name": "User Microservice API",
    "description": "Complete test flow for User Microservice API endpoints including Auth, User, Role, and Permission modules",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_role_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_permission_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_email",
      "value": "admin@tripsync.com",
      "type": "string"
    },
    {
      "key": "admin_password",
      "value": "Admin@123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Auth Module",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.expect(jsonData).to.have.property('refreshToken');",
                  "    ",
                  "    // Store tokens for subsequent requests",
                  "    pm.collectionVariables.set(\"access_token\", jsonData.accessToken);",
                  "    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
                  "});",
                  "",
                  "pm.test(\"User information is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password to get access tokens"
          }
        },
        {
          "name": "Authorize Claims",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Authorization response is valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('authorized');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"claims\": {\n        \"sub\": \"user-id\",\n        \"roles\": [\"system admin\"]\n    },\n    \"required\": {\n        \"roles\": [\"system admin\"],\n        \"permission\": {\n            \"action\": \"read\",\n            \"resource\": \"user\"\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/authorize-claims",
              "host": ["{{base_url}}"],
              "path": ["auth", "authorize-claims"]
            },
            "description": "Verify if user claims satisfy required permissions"
          }
        }
      ]
    },
    {
      "name": "Permission Module",
      "item": [
        {
          "name": "Create Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Permission created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('action');",
                  "    pm.expect(jsonData).to.have.property('resource');",
                  "    ",
                  "    // Store permission ID for subsequent tests",
                  "    pm.collectionVariables.set(\"test_permission_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique permission name for testing",
                  "pm.variables.set(\"test_permission_action\", \"test_action_\" + new Date().getTime());",
                  "pm.variables.set(\"test_permission_resource\", \"test_resource_\" + new Date().getTime());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"{{test_permission_action}}\",\n    \"resource\": \"{{test_permission_resource}}\",\n    \"description\": \"Test permission created by Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/permission",
              "host": ["{{base_url}}"],
              "path": ["permission"]
            },
            "description": "Create a new permission"
          }
        },
        {
          "name": "Bulk Create Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Multiple permissions created\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"permissions\": [\n        {\n            \"action\": \"create\",\n            \"resource\": \"trip\",\n            \"description\": \"Create trip permission\"\n        },\n        {\n            \"action\": \"read\",\n            \"resource\": \"trip\",\n            \"description\": \"Read trip permission\"\n        },\n        {\n            \"action\": \"update\",\n            \"resource\": \"trip\",\n            \"description\": \"Update trip permission\"\n        },\n        {\n            \"action\": \"delete\",\n            \"resource\": \"trip\",\n            \"description\": \"Delete trip permission\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/permission/bulk",
              "host": ["{{base_url}}"],
              "path": ["permission", "bulk"]
            },
            "description": "Create multiple permissions at once"
          }
        },
        {
          "name": "Get All Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data and meta\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/permission?page=1&limit=10&sort=createdAt&order=DESC",
              "host": ["{{base_url}}"],
              "path": ["permission"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "createdAt"
                },
                {
                  "key": "order",
                  "value": "DESC"
                },
                {
                  "key": "action",
                  "value": "read",
                  "disabled": true
                },
                {
                  "key": "resource",
                  "value": "user",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated list of permissions with optional filters"
          }
        },
        {
          "name": "Get Permission by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Permission details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('action');",
                  "    pm.expect(jsonData).to.have.property('resource');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/permission/{{test_permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["permission", "{{test_permission_id}}"]
            },
            "description": "Get a specific permission by ID"
          }
        },
        {
          "name": "Update Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Permission updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.description).to.include('Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Updated test permission description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/permission/{{test_permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["permission", "{{test_permission_id}}"]
            },
            "description": "Update permission details"
          }
        }
      ]
    },
    {
      "name": "Role Module",
      "item": [
        {
          "name": "Create Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Role created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    ",
                  "    // Store role ID for subsequent tests",
                  "    pm.collectionVariables.set(\"test_role_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique role name for testing",
                  "pm.variables.set(\"test_role_name\", \"test_role_\" + new Date().getTime());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{test_role_name}}\",\n    \"description\": \"Test role created by Postman\",\n    \"permissionIds\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/role",
              "host": ["{{base_url}}"],
              "path": ["role"]
            },
            "description": "Create a new role with optional permissions"
          }
        },
        {
          "name": "Get All Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data and meta\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/role?page=1&limit=10&sort=name&order=ASC",
              "host": ["{{base_url}}"],
              "path": ["role"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "name"
                },
                {
                  "key": "order",
                  "value": "ASC"
                },
                {
                  "key": "name",
                  "value": "admin",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated list of roles with optional filters"
          }
        },
        {
          "name": "Get Role by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role details returned with permissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('permissions');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/role/{{test_role_id}}",
              "host": ["{{base_url}}"],
              "path": ["role", "{{test_role_id}}"]
            },
            "description": "Get a specific role by ID"
          }
        },
        {
          "name": "Get Role by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role found by name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name).to.equal('system admin');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/role/name/system%20admin",
              "host": ["{{base_url}}"],
              "path": ["role", "name", "system%20admin"]
            },
            "description": "Get a role by its name"
          }
        },
        {
          "name": "Update Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.description).to.include('Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Updated test role description\",\n    \"permissionIds\": [\"{{test_permission_id}}\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/role/{{test_role_id}}",
              "host": ["{{base_url}}"],
              "path": ["role", "{{test_role_id}}"]
            },
            "description": "Update role details and permissions"
          }
        }
      ]
    },
    {
      "name": "User Module",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    ",
                  "    // Store user ID for subsequent tests",
                  "    pm.collectionVariables.set(\"test_user_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for testing",
                  "pm.variables.set(\"test_user_email\", \"test_\" + new Date().getTime() + \"@example.com\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"TestPassword123!\",\n    \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            },
            "description": "Create a new user (requires admin permissions)"
          }
        },
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data and meta\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user?page=1&limit=10&sort=createdAt&order=DESC",
              "host": ["{{base_url}}"],
              "path": ["user"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "createdAt"
                },
                {
                  "key": "order",
                  "value": "DESC"
                },
                {
                  "key": "email",
                  "value": "test@example.com",
                  "disabled": true
                },
                {
                  "key": "firstName",
                  "value": "John",
                  "disabled": true
                },
                {
                  "key": "lastName",
                  "value": "Doe",
                  "disabled": true
                },
                {
                  "key": "roleId",
                  "value": "{{test_role_id}}",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated list of users with optional filters (requires admin permissions)"
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["user", "{{test_user_id}}"]
            },
            "description": "Get a specific user by ID"
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.firstName).to.equal('UpdatedTest');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"UpdatedTest\",\n    \"lastName\": \"UpdatedUser\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            },
            "description": "Update current user's profile (uses token sub claim)"
          }
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [
        {
          "name": "Delete Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["user", "{{test_user_id}}"]
            },
            "description": "Delete the test user created during testing"
          }
        },
        {
          "name": "Delete Test Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/role/{{test_role_id}}",
              "host": ["{{base_url}}"],
              "path": ["role", "{{test_role_id}}"]
            },
            "description": "Delete the test role created during testing"
          }
        },
        {
          "name": "Delete Test Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/permission/{{test_permission_id}}",
              "host": ["{{base_url}}"],
              "path": ["permission", "{{test_permission_id}}"]
            },
            "description": "Delete the test permission created during testing"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Can be used to set up common headers or authentication"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Check for common error formats",
          "if (pm.response.code >= 400) {",
          "    pm.test(\"Error response has proper format\", function () {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('message');",
          "        pm.expect(jsonData).to.have.property('statusCode');",
          "    });",
          "}"
        ]
      }
    }
  ]
}