{
  "info": {
    "name": "GPS Service - Trip Sync",
    "description": "Complete API testing collection for GPS microservice including tracking, check-in/out, analytics, and export features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "gps_service_url",
      "value": "http://localhost:3004",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "123e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    },
    {
      "key": "trip_id",
      "value": "323e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    },
    {
      "key": "trip_location_id",
      "value": "423e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    },
    {
      "key": "location_id",
      "value": "523e4567-e89b-12d3-a456-426614174000",
      "type": "string"
    },
    {
      "key": "export_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "check_in_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. GPS Tracking",
      "item": [
        {
          "name": "Track Single GPS Point",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has GPS log ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.environment.set('gps_log_id', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Success message received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate current timestamp",
                  "pm.variables.set('current_timestamp', new Date().toISOString());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripId\": \"{{trip_id}}\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542,\n    \"timestamp\": \"{{current_timestamp}}\",\n    \"accuracy\": 5.0,\n    \"speed\": 45.5,\n    \"heading\": 90.0\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/track",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "track"]
            },
            "description": "Track a single GPS location point for a trip"
          }
        },
        {
          "name": "Batch Track GPS Points",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has processed count\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('processed');",
                  "    pm.expect(jsonData.processed).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Check for duplicates handling\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.duplicates) {",
                  "        pm.expect(jsonData.duplicates).to.be.an('array');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate multiple timestamps",
                  "const now = new Date();",
                  "const locations = [];",
                  "",
                  "for (let i = 0; i < 10; i++) {",
                  "    const timestamp = new Date(now.getTime() - (i * 60000)); // 1 minute intervals",
                  "    locations.push({",
                  "        latitude: 21.0285 + (Math.random() * 0.01),",
                  "        longitude: 105.8542 + (Math.random() * 0.01),",
                  "        timestamp: timestamp.toISOString(),",
                  "        accuracy: 5.0 + Math.random() * 5,",
                  "        speed: 30 + Math.random() * 30,",
                  "        heading: Math.random() * 360",
                  "    });",
                  "}",
                  "",
                  "pm.variables.set('gps_locations', JSON.stringify(locations));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripId\": \"{{trip_id}}\",\n    \"locations\": {{gps_locations}}\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/track/batch",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "track", "batch"]
            },
            "description": "Batch track multiple GPS points at once"
          }
        },
        {
          "name": "Get Trip Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has route data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tripId');",
                  "    pm.expect(jsonData).to.have.property('route');",
                  "    pm.expect(jsonData).to.have.property('totalDistance');",
                  "    pm.expect(jsonData).to.have.property('duration');",
                  "    pm.expect(jsonData).to.have.property('pointCount');",
                  "});",
                  "",
                  "pm.test(\"Route is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.route).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/route/{{trip_id}}?simplified=false",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "route", "{{trip_id}}"],
              "query": [
                {
                  "key": "startTime",
                  "value": "2024-01-01T00:00:00Z",
                  "disabled": true
                },
                {
                  "key": "endTime",
                  "value": "2024-12-31T23:59:59Z",
                  "disabled": true
                },
                {
                  "key": "simplified",
                  "value": "false"
                }
              ]
            },
            "description": "Get the complete route for a trip with optional time filtering"
          }
        },
        {
          "name": "Get Simplified Trip Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Route is simplified\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.isSimplified).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/route/{{trip_id}}?simplified=true",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "route", "{{trip_id}}"],
              "query": [
                {
                  "key": "simplified",
                  "value": "true"
                }
              ]
            },
            "description": "Get a simplified version of the trip route"
          }
        }
      ]
    },
    {
      "name": "2. Check-in/Check-out",
      "item": [
        {
          "name": "Check In at Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check-in successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('checkInId');",
                  "    pm.expect(jsonData).to.have.property('distanceFromLocation');",
                  "    pm.expect(jsonData).to.have.property('locationName');",
                  "    ",
                  "    // Store check-in ID for check-out",
                  "    pm.environment.set('check_in_id', jsonData.checkInId);",
                  "});",
                  "",
                  "pm.test(\"Distance validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.distanceFromLocation).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.variables.set('check_in_time', new Date().toISOString());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripLocationId\": \"{{trip_location_id}}\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542,\n    \"timestamp\": \"{{check_in_time}}\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/check-in",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "check-in"]
            },
            "description": "Check in at a trip location"
          }
        },
        {
          "name": "Check Out from Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Check-out successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData).to.have.property('checkOutId');",
                  "    pm.expect(jsonData).to.have.property('duration');",
                  "    pm.expect(jsonData).to.have.property('checkInTime');",
                  "    pm.expect(jsonData).to.have.property('checkOutTime');",
                  "});",
                  "",
                  "pm.test(\"Duration calculated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.duration).to.be.a('number');",
                  "    pm.expect(jsonData.duration).to.be.at.least(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Wait 5 seconds after check-in for realistic duration",
                  "setTimeout(() => {",
                  "    pm.variables.set('check_out_time', new Date().toISOString());",
                  "}, 5000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripLocationId\": \"{{trip_location_id}}\",\n    \"latitude\": 21.0290,\n    \"longitude\": 105.8545,\n    \"timestamp\": \"{{check_out_time}}\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/check-out",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "check-out"]
            },
            "description": "Check out from a trip location"
          }
        },
        {
          "name": "Validate Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Location validation response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('isWithinRadius');",
                  "    pm.expect(jsonData).to.have.property('distance');",
                  "    pm.expect(jsonData).to.have.property('locationName');",
                  "    pm.expect(jsonData).to.have.property('offsetRadius');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"locationId\": \"{{location_id}}\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/validate/location",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "validate", "location"]
            },
            "description": "Validate if coordinates are within location radius"
          }
        },
        {
          "name": "Get Nearby Locations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Nearby locations found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('locations');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('searchCenter');",
                  "    pm.expect(jsonData).to.have.property('searchRadius');",
                  "    pm.expect(jsonData.locations).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/nearby?latitude=21.0285&longitude=105.8542&radius=1000",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "nearby"],
              "query": [
                {
                  "key": "latitude",
                  "value": "21.0285"
                },
                {
                  "key": "longitude",
                  "value": "105.8542"
                },
                {
                  "key": "radius",
                  "value": "1000",
                  "description": "Search radius in meters"
                }
              ]
            },
            "description": "Find locations within specified radius"
          }
        }
      ]
    },
    {
      "name": "3. Route Analysis",
      "item": [
        {
          "name": "Detect Stops",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stops detected\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('stops');",
                  "    pm.expect(jsonData).to.have.property('totalStops');",
                  "    pm.expect(jsonData).to.have.property('totalStopTime');",
                  "    pm.expect(jsonData).to.have.property('tripId');",
                  "    pm.expect(jsonData.stops).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Stop structure validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.stops.length > 0) {",
                  "        const stop = jsonData.stops[0];",
                  "        pm.expect(stop).to.have.property('location');",
                  "        pm.expect(stop).to.have.property('arrivalTime');",
                  "        pm.expect(stop).to.have.property('departureTime');",
                  "        pm.expect(stop).to.have.property('duration');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/route/{{trip_id}}/stops?minDuration=5",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "route", "{{trip_id}}", "stops"],
              "query": [
                {
                  "key": "minDuration",
                  "value": "5",
                  "description": "Minimum stop duration in minutes"
                }
              ]
            },
            "description": "Detect stops during a trip based on GPS data"
          }
        },
        {
          "name": "Get Trip Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Statistics structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tripId');",
                  "    pm.expect(jsonData).to.have.property('totalDistance');",
                  "    pm.expect(jsonData).to.have.property('duration');",
                  "    pm.expect(jsonData).to.have.property('averageSpeed');",
                  "    pm.expect(jsonData).to.have.property('maxSpeed');",
                  "    pm.expect(jsonData).to.have.property('pointCount');",
                  "    pm.expect(jsonData).to.have.property('stopCount');",
                  "    pm.expect(jsonData).to.have.property('efficiencyScore');",
                  "});",
                  "",
                  "pm.test(\"Efficiency score range\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.efficiencyScore).to.be.at.least(0);",
                  "    pm.expect(jsonData.efficiencyScore).to.be.at.most(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/analytics/trip/{{trip_id}}",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "analytics", "trip", "{{trip_id}}"]
            },
            "description": "Get comprehensive statistics for a specific trip"
          }
        }
      ]
    },
    {
      "name": "4. Analytics",
      "item": [
        {
          "name": "Get Analytics Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Analytics summary structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalDistance');",
                  "    pm.expect(jsonData).to.have.property('totalTrips');",
                  "    pm.expect(jsonData).to.have.property('averageSpeed');",
                  "    pm.expect(jsonData).to.have.property('totalDuration');",
                  "    pm.expect(jsonData).to.have.property('mostVisitedLocations');",
                  "    pm.expect(jsonData).to.have.property('period');",
                  "    pm.expect(jsonData).to.have.property('movementStats');",
                  "});",
                  "",
                  "pm.test(\"Movement stats validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.movementStats).to.have.property('totalStops');",
                  "    pm.expect(jsonData.movementStats).to.have.property('averageStopDuration');",
                  "    pm.expect(jsonData.movementStats).to.have.property('longestTrip');",
                  "    pm.expect(jsonData.movementStats).to.have.property('mostProductiveDay');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/analytics/summary",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "analytics", "summary"]
            },
            "description": "Get comprehensive analytics summary for a date range"
          }
        },
        {
          "name": "Get User Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User-specific analytics\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.user) {",
                  "        pm.expect(jsonData.user).to.have.property('userId');",
                  "        pm.expect(jsonData.user).to.have.property('fullName');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/analytics/user",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "analytics", "user"]
            },
            "description": "Get analytics for a specific user"
          }
        }
      ]
    },
    {
      "name": "5. Real-time Monitoring",
      "item": [
        {
          "name": "Get Realtime Locations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Realtime locations structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('locations');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData.locations).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Location data validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.locations.length > 0) {",
                  "        const location = jsonData.locations[0];",
                  "        pm.expect(location).to.have.property('userId');",
                  "        pm.expect(location).to.have.property('tripId');",
                  "        pm.expect(location).to.have.property('latitude');",
                  "        pm.expect(location).to.have.property('longitude');",
                  "        pm.expect(location).to.have.property('timestamp');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/realtime/locations?tripIds={{trip_id}}",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "realtime", "locations"],
              "query": [
                {
                  "key": "userIds",
                  "value": "{{user_id}},user2_id,user3_id",
                  "description": "Comma-separated user IDs",
                  "disabled": true
                },
                {
                  "key": "tripIds",
                  "value": "{{trip_id}}",
                  "description": "Comma-separated trip IDs"
                },
                {
                  "key": "since",
                  "value": "2024-01-15T10:00:00Z",
                  "description": "Get updates since this timestamp",
                  "disabled": true
                }
              ]
            },
            "description": "Get real-time locations for multiple users/trips"
          }
        },
        {
          "name": "Get Latest Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Latest location received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('latitude');",
                  "    pm.expect(jsonData).to.have.property('longitude');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/realtime/latest/{{trip_id}}",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "realtime", "latest", "{{trip_id}}"]
            },
            "description": "Get the latest location for a specific trip"
          }
        }
      ]
    },
    {
      "name": "6. Export",
      "item": [
        {
          "name": "Create GPS Export",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Export job created\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('exportId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('estimatedTime');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    ",
                  "    // Store export ID for status check",
                  "    pm.environment.set('export_id', jsonData.exportId);",
                  "});",
                  "",
                  "pm.test(\"Export status is processing\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('processing');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": {\n        \"startDate\": \"2024-01-01\",\n        \"endDate\": \"2024-12-31\",\n        \"userIds\": [\"{{user_id}}\"],\n        \"tripIds\": [\"{{trip_id}}\"]\n    },\n    \"format\": \"csv\",\n    \"includeUserDetails\": true,\n    \"includeTripDetails\": true,\n    \"anonymizeData\": false\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/export/create",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "export", "create"]
            },
            "description": "Create a GPS data export job"
          }
        },
        {
          "name": "Get Export Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Export status received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('exportId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.expect(jsonData).to.have.property('metadata');",
                  "});",
                  "",
                  "pm.test(\"Check download URL when completed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.status === 'completed') {",
                  "        pm.expect(jsonData).to.have.property('downloadUrl');",
                  "        pm.expect(jsonData).to.have.property('completedAt');",
                  "        pm.expect(jsonData).to.have.property('expiresAt');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/export/{{export_id}}/status",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "export", "{{export_id}}", "status"]
            },
            "description": "Check the status of an export job"
          }
        },
        {
          "name": "Create JSON Export",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": {\n        \"startDate\": \"2024-01-01\",\n        \"endDate\": \"2024-12-31\"\n    },\n    \"format\": \"json\",\n    \"includeUserDetails\": false,\n    \"includeTripDetails\": false,\n    \"anonymizeData\": true\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/export/create",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "export", "create"]
            },
            "description": "Create an anonymized JSON export"
          }
        },
        {
          "name": "Create GPX Export",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": {\n        \"startDate\": \"2024-01-01\",\n        \"endDate\": \"2024-12-31\",\n        \"tripIds\": [\"{{trip_id}}\"]\n    },\n    \"format\": \"gpx\",\n    \"includeUserDetails\": false,\n    \"includeTripDetails\": true,\n    \"anonymizeData\": false\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/export/create",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "export", "create"]
            },
            "description": "Create a GPX format export for GPS tracking apps"
          }
        }
      ]
    },
    {
      "name": "7. Health Check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Service is healthy\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "    pm.expect(jsonData.service).to.equal('gps-micro');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{gps_service_url}}/api/gps/health",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "health"]
            },
            "description": "Check GPS service health status"
          }
        }
      ]
    },
    {
      "name": "8. Error Scenarios",
      "item": [
        {
          "name": "Track GPS - Duplicate Timestamp",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Duplicate error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripId\": \"{{trip_id}}\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542,\n    \"timestamp\": \"2024-01-15T10:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/track",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "track"]
            },
            "description": "Test duplicate timestamp handling"
          }
        },
        {
          "name": "Check In - Already Checked In",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Already checked in error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Already checked in');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripLocationId\": \"{{trip_location_id}}\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542,\n    \"timestamp\": \"2024-01-15T11:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/check-in",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "check-in"]
            },
            "description": "Test double check-in prevention"
          }
        },
        {
          "name": "Check Out - No Check In",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"No check-in error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('No check-in found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tripLocationId\": \"new-location-id\",\n    \"latitude\": 21.0285,\n    \"longitude\": 105.8542,\n    \"timestamp\": \"2024-01-15T12:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/check-out",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "check-out"]
            },
            "description": "Test check-out without check-in"
          }
        },
        {
          "name": "Export - Invalid Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid format error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('format');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"filter\": {\n        \"startDate\": \"2024-01-01\",\n        \"endDate\": \"2024-12-31\"\n    },\n    \"format\": \"invalid_format\"\n}"
            },
            "url": {
              "raw": "{{gps_service_url}}/api/gps/export/create",
              "host": ["{{gps_service_url}}"],
              "path": ["api", "gps", "export", "create"]
            },
            "description": "Test invalid export format handling"
          }
        }
      ]
    }
  ]
}